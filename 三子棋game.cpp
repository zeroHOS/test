#include <cstring>
#include "game.h"
using namespace std;
void initboard(char board[ROW][COL], int row, int col)
{
	int i = 0, j = 0;
	for (i = 0; i < row; i++)
	{
		for (j = 0; j < col; j++)
		{
			board[i][j] = ' ';
		}
	}
}

//void DisplayBoard(char board[ROW][COL], int row, int col)
//{
//	int i = 0;
//	for (i = 0; i < row; i++)
//	{
//		//打印第一行
//		cout << " "<<board[i][0] <<" | "<< board[i][1] <<" | "<< board[i][2] <<" \n";
//		//分割行
//		if (i<row-1)
//		cout << "---|---|---\n";
//
//	}
//}

void DisplayBoard(char board[ROW][COL], int row, int col)
{
	int i = 0;
	for (i = 0; i < row; i++)
	{
		int j = 0;
		for ( j = 0; j < col; j++)
		{
			//打印第一行
			cout << " " << board[i][j]<<" ";
			//分割列
			if (j < col - 1)
				cout << "|";
		}
		cout << endl;
		//分割行
		if (i < row - 1)
		{
			for (j = 0; j < col; j++)
			{
				cout << "---";
				if (j < col - 1)
					cout << "|";
			}
			cout << endl;
		}

	}
}
//玩家
void player(char board[ROW][COL], int row, int col)
{
	int x , y ;
	cout << "玩家走\n";
	
	//判断坐标合法性
	while (1)
	{
		cout << "请输入要下的坐标\n";
		cin >> x >> y;
		if ((x >= 1 && x <= row) || (y >= 1 && y <= col))
		{
			if (board[x - 1][y - 1] == ' ')
			{
				board[x - 1][y - 1] = '*';
				break;
			}
			else
			{
				cout << "该坐标被占用\n";
			}
		}
		else
		{
			cout << "坐标非法，请重新输入";
		}
	}
	
}
//电脑
void com(char board[ROW][COL], int row, int col)
{
	int x, y;
	cout << "电脑走\n";
	while (1)
	{
		x = rand() % row;
		y = rand() % col;
		if (board[x][y] == ' ')
		{
			board[x][y] = '#';
			break;
		}
	}
}

int full(char board[ROW][COL], int row, int col)//返回1表示棋盘满，0表示未满
{
	int i;
	int j;
	for (i = 0; i < row; i++)
	{
		for (j = 0; j < col; j++)
		{
			if (board[i][j] == ' ')
				return 0;
		}
	}
	return 1;
}
//判断输赢
char win(char board[ROW][COL], int row, int col)
{
	int i;
	//横三行
	for (i = 0; i < row; i++)
	{
		if (board[i][0] == board[i][1] && board[i][1] == board[i][2] && board[i][0] != ' ')
			return board[i][0];
	}
	//竖三列
	for (i = 0; i < row; i++)
	{
		if (board[0][i] == board[1][i] && board[1][i] == board[2][i] && board[0][i] != ' ')
			return board[0][i];
	}
	//对角
	if (board[0][0] == board[1][1] && board[1][1] == board[2][2] && board[0][0] != ' ')
	{
		return board[0][0];
	}
	if (board[2][0] == board[1][1] && board[1][1] == board[0][2] && board[0][2] != ' ')
	{
		return board[0][0];
	}
	//平局
	if (full( board,ROW,COL) == 1)
	{
		return 'Q';
	}
	return 'c';
}